//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SFIDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SFIDatabaseContext : DbContext
    {
        public SFIDatabaseContext()
            : base("name=SFIDatabaseContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<address> addresses { get; set; }
        public virtual DbSet<bank_accounts> bank_accounts { get; set; }
        public virtual DbSet<client> clients { get; set; }
        public virtual DbSet<contact_method_types> contact_method_types { get; set; }
        public virtual DbSet<contact_methods> contact_methods { get; set; }
        public virtual DbSet<credit_applications> credit_applications { get; set; }
        public virtual DbSet<credit_applications_state> credit_applications_state { get; set; }
        public virtual DbSet<credit_conditions> credit_conditions { get; set; }
        public virtual DbSet<credit_granting_polices> credit_granting_polices { get; set; }
        public virtual DbSet<credit_types> credit_types { get; set; }
        public virtual DbSet<credit> credits { get; set; }
        public virtual DbSet<dictum> dictums { get; set; }
        public virtual DbSet<digital_documents> digital_documents { get; set; }
        public virtual DbSet<employee_roles> employee_roles { get; set; }
        public virtual DbSet<payment_layouts> payment_layouts { get; set; }
        public virtual DbSet<payment> payments { get; set; }
        public virtual DbSet<personal_references> personal_references { get; set; }
        public virtual DbSet<polices_apply_dictums> polices_apply_dictums { get; set; }
        public virtual DbSet<regime> regimes { get; set; }
        public virtual DbSet<system_accounts> system_accounts { get; set; }
        public virtual DbSet<work_centers> work_centers { get; set; }
    
        public virtual int InsertCreditConditionProcedure(Nullable<double> interestRate, Nullable<bool> isActive, Nullable<bool> isIvaApplied, Nullable<double> interestOnArrears, Nullable<double> advancePaymentReduction, Nullable<int> paymentMonths, Nullable<int> creditTypeId, string identifier, ObjectParameter exists)
        {
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(double));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isIvaAppliedParameter = isIvaApplied.HasValue ?
                new ObjectParameter("IsIvaApplied", isIvaApplied) :
                new ObjectParameter("IsIvaApplied", typeof(bool));
    
            var interestOnArrearsParameter = interestOnArrears.HasValue ?
                new ObjectParameter("InterestOnArrears", interestOnArrears) :
                new ObjectParameter("InterestOnArrears", typeof(double));
    
            var advancePaymentReductionParameter = advancePaymentReduction.HasValue ?
                new ObjectParameter("AdvancePaymentReduction", advancePaymentReduction) :
                new ObjectParameter("AdvancePaymentReduction", typeof(double));
    
            var paymentMonthsParameter = paymentMonths.HasValue ?
                new ObjectParameter("PaymentMonths", paymentMonths) :
                new ObjectParameter("PaymentMonths", typeof(int));
    
            var creditTypeIdParameter = creditTypeId.HasValue ?
                new ObjectParameter("CreditTypeId", creditTypeId) :
                new ObjectParameter("CreditTypeId", typeof(int));
    
            var identifierParameter = identifier != null ?
                new ObjectParameter("Identifier", identifier) :
                new ObjectParameter("Identifier", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCreditConditionProcedure", interestRateParameter, isActiveParameter, isIvaAppliedParameter, interestOnArrearsParameter, advancePaymentReductionParameter, paymentMonthsParameter, creditTypeIdParameter, identifierParameter, exists);
        }
    
        public virtual int InsertCreditPolicyProcedure(string title, string description, Nullable<System.DateTime> effectiveDate, Nullable<bool> isActive, ObjectParameter exists)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCreditPolicyProcedure", titleParameter, descriptionParameter, effectiveDateParameter, isActiveParameter, exists);
        }
    
        public virtual int RegisterClient(string clientName, string clientSurname, string clientLastName, Nullable<System.DateTime> clientBirthdate, string clientCurp, string clientRfc, string clientStreet, string clientNeighborhood, string clientInteriorNumber, string clientOutdoorNumber, string clientPostCode, string clientCity, string clientMunicipality, string clientState, string cardNumber, string bank, string holder, string companyName, string workCenterPhoneNumber, string employeePosition, Nullable<decimal> salary, string employeeSeniority, string humanResourcesPhone, string workCenterStreet, string workCenterNeighborhood, string workCenterInteriorNumber, string workCenterOutdoorNumber, string workCenterPostCode, string workCenterCity, string workCenterMunicipality, string workCenterState, string clientPhoneNumberFirst, string clientPhoneNumberFirstType, string clientPhoneNumberSecond, string clientPhoneNumberSecondType, string clientPhoneNumberThird, string clientPhoneNumberThirdType, string clientPhoneNumberFourth, string clientPhoneNumberFourthType, string clientEmailFirst, string clientEmailFirstType, string clientEmailSecond, string clientEmailSecondType, string clientEmailThird, string clientEmailThirdType, string referenceNameFirst, string referenceSurnameFirst, string referenceLastNameFirst, string referencePhoneNumberFirst, string referenceKinshipFirst, string referenceRelationshipFirst, string referenceIneKeyFirst, string referenceStreetFirst, string referenceNeighborhoodFirst, string referenceInteriorNumberFirst, string referenceOutdoorNumberFirst, string referencePostCodeFirst, string referenceCityFirst, string referenceMunicipalityFirst, string referenceStateFirst, string referenceNameSecond, string referenceSurnameSecond, string referenceLastNameSecond, string referencePhoneNumberSecond, string referenceKinshipSecond, string referenceRelationshipSecond, string referenceIneKeySecond, string referenceStreetSecond, string referenceNeighborhoodSecond, string referenceInteriorNumberSecond, string referenceOutdoorNumberSecond, string referencePostCodeSecond, string referenceCitySecond, string referenceMunicipalitySecond, string referenceStateSecond, ObjectParameter success)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var clientSurnameParameter = clientSurname != null ?
                new ObjectParameter("ClientSurname", clientSurname) :
                new ObjectParameter("ClientSurname", typeof(string));
    
            var clientLastNameParameter = clientLastName != null ?
                new ObjectParameter("ClientLastName", clientLastName) :
                new ObjectParameter("ClientLastName", typeof(string));
    
            var clientBirthdateParameter = clientBirthdate.HasValue ?
                new ObjectParameter("ClientBirthdate", clientBirthdate) :
                new ObjectParameter("ClientBirthdate", typeof(System.DateTime));
    
            var clientCurpParameter = clientCurp != null ?
                new ObjectParameter("ClientCurp", clientCurp) :
                new ObjectParameter("ClientCurp", typeof(string));
    
            var clientRfcParameter = clientRfc != null ?
                new ObjectParameter("ClientRfc", clientRfc) :
                new ObjectParameter("ClientRfc", typeof(string));
    
            var clientStreetParameter = clientStreet != null ?
                new ObjectParameter("ClientStreet", clientStreet) :
                new ObjectParameter("ClientStreet", typeof(string));
    
            var clientNeighborhoodParameter = clientNeighborhood != null ?
                new ObjectParameter("ClientNeighborhood", clientNeighborhood) :
                new ObjectParameter("ClientNeighborhood", typeof(string));
    
            var clientInteriorNumberParameter = clientInteriorNumber != null ?
                new ObjectParameter("ClientInteriorNumber", clientInteriorNumber) :
                new ObjectParameter("ClientInteriorNumber", typeof(string));
    
            var clientOutdoorNumberParameter = clientOutdoorNumber != null ?
                new ObjectParameter("ClientOutdoorNumber", clientOutdoorNumber) :
                new ObjectParameter("ClientOutdoorNumber", typeof(string));
    
            var clientPostCodeParameter = clientPostCode != null ?
                new ObjectParameter("ClientPostCode", clientPostCode) :
                new ObjectParameter("ClientPostCode", typeof(string));
    
            var clientCityParameter = clientCity != null ?
                new ObjectParameter("ClientCity", clientCity) :
                new ObjectParameter("ClientCity", typeof(string));
    
            var clientMunicipalityParameter = clientMunicipality != null ?
                new ObjectParameter("ClientMunicipality", clientMunicipality) :
                new ObjectParameter("ClientMunicipality", typeof(string));
    
            var clientStateParameter = clientState != null ?
                new ObjectParameter("ClientState", clientState) :
                new ObjectParameter("ClientState", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var holderParameter = holder != null ?
                new ObjectParameter("Holder", holder) :
                new ObjectParameter("Holder", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var workCenterPhoneNumberParameter = workCenterPhoneNumber != null ?
                new ObjectParameter("WorkCenterPhoneNumber", workCenterPhoneNumber) :
                new ObjectParameter("WorkCenterPhoneNumber", typeof(string));
    
            var employeePositionParameter = employeePosition != null ?
                new ObjectParameter("EmployeePosition", employeePosition) :
                new ObjectParameter("EmployeePosition", typeof(string));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var employeeSeniorityParameter = employeeSeniority != null ?
                new ObjectParameter("EmployeeSeniority", employeeSeniority) :
                new ObjectParameter("EmployeeSeniority", typeof(string));
    
            var humanResourcesPhoneParameter = humanResourcesPhone != null ?
                new ObjectParameter("HumanResourcesPhone", humanResourcesPhone) :
                new ObjectParameter("HumanResourcesPhone", typeof(string));
    
            var workCenterStreetParameter = workCenterStreet != null ?
                new ObjectParameter("WorkCenterStreet", workCenterStreet) :
                new ObjectParameter("WorkCenterStreet", typeof(string));
    
            var workCenterNeighborhoodParameter = workCenterNeighborhood != null ?
                new ObjectParameter("WorkCenterNeighborhood", workCenterNeighborhood) :
                new ObjectParameter("WorkCenterNeighborhood", typeof(string));
    
            var workCenterInteriorNumberParameter = workCenterInteriorNumber != null ?
                new ObjectParameter("WorkCenterInteriorNumber", workCenterInteriorNumber) :
                new ObjectParameter("WorkCenterInteriorNumber", typeof(string));
    
            var workCenterOutdoorNumberParameter = workCenterOutdoorNumber != null ?
                new ObjectParameter("WorkCenterOutdoorNumber", workCenterOutdoorNumber) :
                new ObjectParameter("WorkCenterOutdoorNumber", typeof(string));
    
            var workCenterPostCodeParameter = workCenterPostCode != null ?
                new ObjectParameter("WorkCenterPostCode", workCenterPostCode) :
                new ObjectParameter("WorkCenterPostCode", typeof(string));
    
            var workCenterCityParameter = workCenterCity != null ?
                new ObjectParameter("WorkCenterCity", workCenterCity) :
                new ObjectParameter("WorkCenterCity", typeof(string));
    
            var workCenterMunicipalityParameter = workCenterMunicipality != null ?
                new ObjectParameter("WorkCenterMunicipality", workCenterMunicipality) :
                new ObjectParameter("WorkCenterMunicipality", typeof(string));
    
            var workCenterStateParameter = workCenterState != null ?
                new ObjectParameter("WorkCenterState", workCenterState) :
                new ObjectParameter("WorkCenterState", typeof(string));
    
            var clientPhoneNumberFirstParameter = clientPhoneNumberFirst != null ?
                new ObjectParameter("ClientPhoneNumberFirst", clientPhoneNumberFirst) :
                new ObjectParameter("ClientPhoneNumberFirst", typeof(string));
    
            var clientPhoneNumberFirstTypeParameter = clientPhoneNumberFirstType != null ?
                new ObjectParameter("ClientPhoneNumberFirstType", clientPhoneNumberFirstType) :
                new ObjectParameter("ClientPhoneNumberFirstType", typeof(string));
    
            var clientPhoneNumberSecondParameter = clientPhoneNumberSecond != null ?
                new ObjectParameter("ClientPhoneNumberSecond", clientPhoneNumberSecond) :
                new ObjectParameter("ClientPhoneNumberSecond", typeof(string));
    
            var clientPhoneNumberSecondTypeParameter = clientPhoneNumberSecondType != null ?
                new ObjectParameter("ClientPhoneNumberSecondType", clientPhoneNumberSecondType) :
                new ObjectParameter("ClientPhoneNumberSecondType", typeof(string));
    
            var clientPhoneNumberThirdParameter = clientPhoneNumberThird != null ?
                new ObjectParameter("ClientPhoneNumberThird", clientPhoneNumberThird) :
                new ObjectParameter("ClientPhoneNumberThird", typeof(string));
    
            var clientPhoneNumberThirdTypeParameter = clientPhoneNumberThirdType != null ?
                new ObjectParameter("ClientPhoneNumberThirdType", clientPhoneNumberThirdType) :
                new ObjectParameter("ClientPhoneNumberThirdType", typeof(string));
    
            var clientPhoneNumberFourthParameter = clientPhoneNumberFourth != null ?
                new ObjectParameter("ClientPhoneNumberFourth", clientPhoneNumberFourth) :
                new ObjectParameter("ClientPhoneNumberFourth", typeof(string));
    
            var clientPhoneNumberFourthTypeParameter = clientPhoneNumberFourthType != null ?
                new ObjectParameter("ClientPhoneNumberFourthType", clientPhoneNumberFourthType) :
                new ObjectParameter("ClientPhoneNumberFourthType", typeof(string));
    
            var clientEmailFirstParameter = clientEmailFirst != null ?
                new ObjectParameter("ClientEmailFirst", clientEmailFirst) :
                new ObjectParameter("ClientEmailFirst", typeof(string));
    
            var clientEmailFirstTypeParameter = clientEmailFirstType != null ?
                new ObjectParameter("ClientEmailFirstType", clientEmailFirstType) :
                new ObjectParameter("ClientEmailFirstType", typeof(string));
    
            var clientEmailSecondParameter = clientEmailSecond != null ?
                new ObjectParameter("ClientEmailSecond", clientEmailSecond) :
                new ObjectParameter("ClientEmailSecond", typeof(string));
    
            var clientEmailSecondTypeParameter = clientEmailSecondType != null ?
                new ObjectParameter("ClientEmailSecondType", clientEmailSecondType) :
                new ObjectParameter("ClientEmailSecondType", typeof(string));
    
            var clientEmailThirdParameter = clientEmailThird != null ?
                new ObjectParameter("ClientEmailThird", clientEmailThird) :
                new ObjectParameter("ClientEmailThird", typeof(string));
    
            var clientEmailThirdTypeParameter = clientEmailThirdType != null ?
                new ObjectParameter("ClientEmailThirdType", clientEmailThirdType) :
                new ObjectParameter("ClientEmailThirdType", typeof(string));
    
            var referenceNameFirstParameter = referenceNameFirst != null ?
                new ObjectParameter("ReferenceNameFirst", referenceNameFirst) :
                new ObjectParameter("ReferenceNameFirst", typeof(string));
    
            var referenceSurnameFirstParameter = referenceSurnameFirst != null ?
                new ObjectParameter("ReferenceSurnameFirst", referenceSurnameFirst) :
                new ObjectParameter("ReferenceSurnameFirst", typeof(string));
    
            var referenceLastNameFirstParameter = referenceLastNameFirst != null ?
                new ObjectParameter("ReferenceLastNameFirst", referenceLastNameFirst) :
                new ObjectParameter("ReferenceLastNameFirst", typeof(string));
    
            var referencePhoneNumberFirstParameter = referencePhoneNumberFirst != null ?
                new ObjectParameter("ReferencePhoneNumberFirst", referencePhoneNumberFirst) :
                new ObjectParameter("ReferencePhoneNumberFirst", typeof(string));
    
            var referenceKinshipFirstParameter = referenceKinshipFirst != null ?
                new ObjectParameter("ReferenceKinshipFirst", referenceKinshipFirst) :
                new ObjectParameter("ReferenceKinshipFirst", typeof(string));
    
            var referenceRelationshipFirstParameter = referenceRelationshipFirst != null ?
                new ObjectParameter("ReferenceRelationshipFirst", referenceRelationshipFirst) :
                new ObjectParameter("ReferenceRelationshipFirst", typeof(string));
    
            var referenceIneKeyFirstParameter = referenceIneKeyFirst != null ?
                new ObjectParameter("ReferenceIneKeyFirst", referenceIneKeyFirst) :
                new ObjectParameter("ReferenceIneKeyFirst", typeof(string));
    
            var referenceStreetFirstParameter = referenceStreetFirst != null ?
                new ObjectParameter("ReferenceStreetFirst", referenceStreetFirst) :
                new ObjectParameter("ReferenceStreetFirst", typeof(string));
    
            var referenceNeighborhoodFirstParameter = referenceNeighborhoodFirst != null ?
                new ObjectParameter("ReferenceNeighborhoodFirst", referenceNeighborhoodFirst) :
                new ObjectParameter("ReferenceNeighborhoodFirst", typeof(string));
    
            var referenceInteriorNumberFirstParameter = referenceInteriorNumberFirst != null ?
                new ObjectParameter("ReferenceInteriorNumberFirst", referenceInteriorNumberFirst) :
                new ObjectParameter("ReferenceInteriorNumberFirst", typeof(string));
    
            var referenceOutdoorNumberFirstParameter = referenceOutdoorNumberFirst != null ?
                new ObjectParameter("ReferenceOutdoorNumberFirst", referenceOutdoorNumberFirst) :
                new ObjectParameter("ReferenceOutdoorNumberFirst", typeof(string));
    
            var referencePostCodeFirstParameter = referencePostCodeFirst != null ?
                new ObjectParameter("ReferencePostCodeFirst", referencePostCodeFirst) :
                new ObjectParameter("ReferencePostCodeFirst", typeof(string));
    
            var referenceCityFirstParameter = referenceCityFirst != null ?
                new ObjectParameter("ReferenceCityFirst", referenceCityFirst) :
                new ObjectParameter("ReferenceCityFirst", typeof(string));
    
            var referenceMunicipalityFirstParameter = referenceMunicipalityFirst != null ?
                new ObjectParameter("ReferenceMunicipalityFirst", referenceMunicipalityFirst) :
                new ObjectParameter("ReferenceMunicipalityFirst", typeof(string));
    
            var referenceStateFirstParameter = referenceStateFirst != null ?
                new ObjectParameter("ReferenceStateFirst", referenceStateFirst) :
                new ObjectParameter("ReferenceStateFirst", typeof(string));
    
            var referenceNameSecondParameter = referenceNameSecond != null ?
                new ObjectParameter("ReferenceNameSecond", referenceNameSecond) :
                new ObjectParameter("ReferenceNameSecond", typeof(string));
    
            var referenceSurnameSecondParameter = referenceSurnameSecond != null ?
                new ObjectParameter("ReferenceSurnameSecond", referenceSurnameSecond) :
                new ObjectParameter("ReferenceSurnameSecond", typeof(string));
    
            var referenceLastNameSecondParameter = referenceLastNameSecond != null ?
                new ObjectParameter("ReferenceLastNameSecond", referenceLastNameSecond) :
                new ObjectParameter("ReferenceLastNameSecond", typeof(string));
    
            var referencePhoneNumberSecondParameter = referencePhoneNumberSecond != null ?
                new ObjectParameter("ReferencePhoneNumberSecond", referencePhoneNumberSecond) :
                new ObjectParameter("ReferencePhoneNumberSecond", typeof(string));
    
            var referenceKinshipSecondParameter = referenceKinshipSecond != null ?
                new ObjectParameter("ReferenceKinshipSecond", referenceKinshipSecond) :
                new ObjectParameter("ReferenceKinshipSecond", typeof(string));
    
            var referenceRelationshipSecondParameter = referenceRelationshipSecond != null ?
                new ObjectParameter("ReferenceRelationshipSecond", referenceRelationshipSecond) :
                new ObjectParameter("ReferenceRelationshipSecond", typeof(string));
    
            var referenceIneKeySecondParameter = referenceIneKeySecond != null ?
                new ObjectParameter("ReferenceIneKeySecond", referenceIneKeySecond) :
                new ObjectParameter("ReferenceIneKeySecond", typeof(string));
    
            var referenceStreetSecondParameter = referenceStreetSecond != null ?
                new ObjectParameter("ReferenceStreetSecond", referenceStreetSecond) :
                new ObjectParameter("ReferenceStreetSecond", typeof(string));
    
            var referenceNeighborhoodSecondParameter = referenceNeighborhoodSecond != null ?
                new ObjectParameter("ReferenceNeighborhoodSecond", referenceNeighborhoodSecond) :
                new ObjectParameter("ReferenceNeighborhoodSecond", typeof(string));
    
            var referenceInteriorNumberSecondParameter = referenceInteriorNumberSecond != null ?
                new ObjectParameter("ReferenceInteriorNumberSecond", referenceInteriorNumberSecond) :
                new ObjectParameter("ReferenceInteriorNumberSecond", typeof(string));
    
            var referenceOutdoorNumberSecondParameter = referenceOutdoorNumberSecond != null ?
                new ObjectParameter("ReferenceOutdoorNumberSecond", referenceOutdoorNumberSecond) :
                new ObjectParameter("ReferenceOutdoorNumberSecond", typeof(string));
    
            var referencePostCodeSecondParameter = referencePostCodeSecond != null ?
                new ObjectParameter("ReferencePostCodeSecond", referencePostCodeSecond) :
                new ObjectParameter("ReferencePostCodeSecond", typeof(string));
    
            var referenceCitySecondParameter = referenceCitySecond != null ?
                new ObjectParameter("ReferenceCitySecond", referenceCitySecond) :
                new ObjectParameter("ReferenceCitySecond", typeof(string));
    
            var referenceMunicipalitySecondParameter = referenceMunicipalitySecond != null ?
                new ObjectParameter("ReferenceMunicipalitySecond", referenceMunicipalitySecond) :
                new ObjectParameter("ReferenceMunicipalitySecond", typeof(string));
    
            var referenceStateSecondParameter = referenceStateSecond != null ?
                new ObjectParameter("ReferenceStateSecond", referenceStateSecond) :
                new ObjectParameter("ReferenceStateSecond", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterClient", clientNameParameter, clientSurnameParameter, clientLastNameParameter, clientBirthdateParameter, clientCurpParameter, clientRfcParameter, clientStreetParameter, clientNeighborhoodParameter, clientInteriorNumberParameter, clientOutdoorNumberParameter, clientPostCodeParameter, clientCityParameter, clientMunicipalityParameter, clientStateParameter, cardNumberParameter, bankParameter, holderParameter, companyNameParameter, workCenterPhoneNumberParameter, employeePositionParameter, salaryParameter, employeeSeniorityParameter, humanResourcesPhoneParameter, workCenterStreetParameter, workCenterNeighborhoodParameter, workCenterInteriorNumberParameter, workCenterOutdoorNumberParameter, workCenterPostCodeParameter, workCenterCityParameter, workCenterMunicipalityParameter, workCenterStateParameter, clientPhoneNumberFirstParameter, clientPhoneNumberFirstTypeParameter, clientPhoneNumberSecondParameter, clientPhoneNumberSecondTypeParameter, clientPhoneNumberThirdParameter, clientPhoneNumberThirdTypeParameter, clientPhoneNumberFourthParameter, clientPhoneNumberFourthTypeParameter, clientEmailFirstParameter, clientEmailFirstTypeParameter, clientEmailSecondParameter, clientEmailSecondTypeParameter, clientEmailThirdParameter, clientEmailThirdTypeParameter, referenceNameFirstParameter, referenceSurnameFirstParameter, referenceLastNameFirstParameter, referencePhoneNumberFirstParameter, referenceKinshipFirstParameter, referenceRelationshipFirstParameter, referenceIneKeyFirstParameter, referenceStreetFirstParameter, referenceNeighborhoodFirstParameter, referenceInteriorNumberFirstParameter, referenceOutdoorNumberFirstParameter, referencePostCodeFirstParameter, referenceCityFirstParameter, referenceMunicipalityFirstParameter, referenceStateFirstParameter, referenceNameSecondParameter, referenceSurnameSecondParameter, referenceLastNameSecondParameter, referencePhoneNumberSecondParameter, referenceKinshipSecondParameter, referenceRelationshipSecondParameter, referenceIneKeySecondParameter, referenceStreetSecondParameter, referenceNeighborhoodSecondParameter, referenceInteriorNumberSecondParameter, referenceOutdoorNumberSecondParameter, referencePostCodeSecondParameter, referenceCitySecondParameter, referenceMunicipalitySecondParameter, referenceStateSecondParameter, success);
        }
    
        public virtual int RegisterCreditApplication(string invoice, Nullable<System.DateTime> expedition_date, Nullable<decimal> minimun_amount_accepted, string purpose, Nullable<decimal> requested_amount, string client_rfc, string employee_number, string credit_condition_identifier, Nullable<int> id_credit_type)
        {
            var invoiceParameter = invoice != null ?
                new ObjectParameter("invoice", invoice) :
                new ObjectParameter("invoice", typeof(string));
    
            var expedition_dateParameter = expedition_date.HasValue ?
                new ObjectParameter("expedition_date", expedition_date) :
                new ObjectParameter("expedition_date", typeof(System.DateTime));
    
            var minimun_amount_acceptedParameter = minimun_amount_accepted.HasValue ?
                new ObjectParameter("minimun_amount_accepted", minimun_amount_accepted) :
                new ObjectParameter("minimun_amount_accepted", typeof(decimal));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("purpose", purpose) :
                new ObjectParameter("purpose", typeof(string));
    
            var requested_amountParameter = requested_amount.HasValue ?
                new ObjectParameter("requested_amount", requested_amount) :
                new ObjectParameter("requested_amount", typeof(decimal));
    
            var client_rfcParameter = client_rfc != null ?
                new ObjectParameter("client_rfc", client_rfc) :
                new ObjectParameter("client_rfc", typeof(string));
    
            var employee_numberParameter = employee_number != null ?
                new ObjectParameter("employee_number", employee_number) :
                new ObjectParameter("employee_number", typeof(string));
    
            var credit_condition_identifierParameter = credit_condition_identifier != null ?
                new ObjectParameter("credit_condition_identifier", credit_condition_identifier) :
                new ObjectParameter("credit_condition_identifier", typeof(string));
    
            var id_credit_typeParameter = id_credit_type.HasValue ?
                new ObjectParameter("id_credit_type", id_credit_type) :
                new ObjectParameter("id_credit_type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterCreditApplication", invoiceParameter, expedition_dateParameter, minimun_amount_acceptedParameter, purposeParameter, requested_amountParameter, client_rfcParameter, employee_numberParameter, credit_condition_identifierParameter, id_credit_typeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateBankAccount(string currentCardNumber, string newBank, string newHolder, string newCardNumber, ObjectParameter success)
        {
            var currentCardNumberParameter = currentCardNumber != null ?
                new ObjectParameter("CurrentCardNumber", currentCardNumber) :
                new ObjectParameter("CurrentCardNumber", typeof(string));
    
            var newBankParameter = newBank != null ?
                new ObjectParameter("NewBank", newBank) :
                new ObjectParameter("NewBank", typeof(string));
    
            var newHolderParameter = newHolder != null ?
                new ObjectParameter("NewHolder", newHolder) :
                new ObjectParameter("NewHolder", typeof(string));
    
            var newCardNumberParameter = newCardNumber != null ?
                new ObjectParameter("NewCardNumber", newCardNumber) :
                new ObjectParameter("NewCardNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBankAccount", currentCardNumberParameter, newBankParameter, newHolderParameter, newCardNumberParameter, success);
        }
    
        public virtual int UpdatePersonalReference(Nullable<int> idPersonalReference, string currentIneKey, string ineKey, string name, string surname, string lastName, string kinship, Nullable<int> relationshipYears, Nullable<int> idAddress, string clientRfc, string phoneNumber, string street, string neighborhood, string interiorNumber, string outdoorNumber, string postCode, string city, string municipality, string state, ObjectParameter success)
        {
            var idPersonalReferenceParameter = idPersonalReference.HasValue ?
                new ObjectParameter("IdPersonalReference", idPersonalReference) :
                new ObjectParameter("IdPersonalReference", typeof(int));
    
            var currentIneKeyParameter = currentIneKey != null ?
                new ObjectParameter("CurrentIneKey", currentIneKey) :
                new ObjectParameter("CurrentIneKey", typeof(string));
    
            var ineKeyParameter = ineKey != null ?
                new ObjectParameter("IneKey", ineKey) :
                new ObjectParameter("IneKey", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var kinshipParameter = kinship != null ?
                new ObjectParameter("Kinship", kinship) :
                new ObjectParameter("Kinship", typeof(string));
    
            var relationshipYearsParameter = relationshipYears.HasValue ?
                new ObjectParameter("RelationshipYears", relationshipYears) :
                new ObjectParameter("RelationshipYears", typeof(int));
    
            var idAddressParameter = idAddress.HasValue ?
                new ObjectParameter("IdAddress", idAddress) :
                new ObjectParameter("IdAddress", typeof(int));
    
            var clientRfcParameter = clientRfc != null ?
                new ObjectParameter("ClientRfc", clientRfc) :
                new ObjectParameter("ClientRfc", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var neighborhoodParameter = neighborhood != null ?
                new ObjectParameter("Neighborhood", neighborhood) :
                new ObjectParameter("Neighborhood", typeof(string));
    
            var interiorNumberParameter = interiorNumber != null ?
                new ObjectParameter("InteriorNumber", interiorNumber) :
                new ObjectParameter("InteriorNumber", typeof(string));
    
            var outdoorNumberParameter = outdoorNumber != null ?
                new ObjectParameter("OutdoorNumber", outdoorNumber) :
                new ObjectParameter("OutdoorNumber", typeof(string));
    
            var postCodeParameter = postCode != null ?
                new ObjectParameter("PostCode", postCode) :
                new ObjectParameter("PostCode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var municipalityParameter = municipality != null ?
                new ObjectParameter("Municipality", municipality) :
                new ObjectParameter("Municipality", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePersonalReference", idPersonalReferenceParameter, currentIneKeyParameter, ineKeyParameter, nameParameter, surnameParameter, lastNameParameter, kinshipParameter, relationshipYearsParameter, idAddressParameter, clientRfcParameter, phoneNumberParameter, streetParameter, neighborhoodParameter, interiorNumberParameter, outdoorNumberParameter, postCodeParameter, cityParameter, municipalityParameter, stateParameter, success);
        }
    
        public virtual int UpdateCreditGrantingPolicy(Nullable<int> id_credit_granting_policy, string title, Nullable<bool> is_active, Nullable<System.DateTime> effective_date, string description, ObjectParameter updated)
        {
            var id_credit_granting_policyParameter = id_credit_granting_policy.HasValue ?
                new ObjectParameter("id_credit_granting_policy", id_credit_granting_policy) :
                new ObjectParameter("id_credit_granting_policy", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var is_activeParameter = is_active.HasValue ?
                new ObjectParameter("is_active", is_active) :
                new ObjectParameter("is_active", typeof(bool));
    
            var effective_dateParameter = effective_date.HasValue ?
                new ObjectParameter("effective_date", effective_date) :
                new ObjectParameter("effective_date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCreditGrantingPolicy", id_credit_granting_policyParameter, titleParameter, is_activeParameter, effective_dateParameter, descriptionParameter, updated);
        }
    
        public virtual int UpdateClientPersonalInformation(string client_rfc, string client_name, string client_last_name, string client_surname, Nullable<System.DateTime> client_birthdate, string address_street, string address_neighborhood, string address_interior_number, string address_outdoor_number, string address_post_code, string address_city, string address_municipality, string address_state)
        {
            var client_rfcParameter = client_rfc != null ?
                new ObjectParameter("client_rfc", client_rfc) :
                new ObjectParameter("client_rfc", typeof(string));
    
            var client_nameParameter = client_name != null ?
                new ObjectParameter("client_name", client_name) :
                new ObjectParameter("client_name", typeof(string));
    
            var client_last_nameParameter = client_last_name != null ?
                new ObjectParameter("client_last_name", client_last_name) :
                new ObjectParameter("client_last_name", typeof(string));
    
            var client_surnameParameter = client_surname != null ?
                new ObjectParameter("client_surname", client_surname) :
                new ObjectParameter("client_surname", typeof(string));
    
            var client_birthdateParameter = client_birthdate.HasValue ?
                new ObjectParameter("client_birthdate", client_birthdate) :
                new ObjectParameter("client_birthdate", typeof(System.DateTime));
    
            var address_streetParameter = address_street != null ?
                new ObjectParameter("address_street", address_street) :
                new ObjectParameter("address_street", typeof(string));
    
            var address_neighborhoodParameter = address_neighborhood != null ?
                new ObjectParameter("address_neighborhood", address_neighborhood) :
                new ObjectParameter("address_neighborhood", typeof(string));
    
            var address_interior_numberParameter = address_interior_number != null ?
                new ObjectParameter("address_interior_number", address_interior_number) :
                new ObjectParameter("address_interior_number", typeof(string));
    
            var address_outdoor_numberParameter = address_outdoor_number != null ?
                new ObjectParameter("address_outdoor_number", address_outdoor_number) :
                new ObjectParameter("address_outdoor_number", typeof(string));
    
            var address_post_codeParameter = address_post_code != null ?
                new ObjectParameter("address_post_code", address_post_code) :
                new ObjectParameter("address_post_code", typeof(string));
    
            var address_cityParameter = address_city != null ?
                new ObjectParameter("address_city", address_city) :
                new ObjectParameter("address_city", typeof(string));
    
            var address_municipalityParameter = address_municipality != null ?
                new ObjectParameter("address_municipality", address_municipality) :
                new ObjectParameter("address_municipality", typeof(string));
    
            var address_stateParameter = address_state != null ?
                new ObjectParameter("address_state", address_state) :
                new ObjectParameter("address_state", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClientPersonalInformation", client_rfcParameter, client_nameParameter, client_last_nameParameter, client_surnameParameter, client_birthdateParameter, address_streetParameter, address_neighborhoodParameter, address_interior_numberParameter, address_outdoor_numberParameter, address_post_codeParameter, address_cityParameter, address_municipalityParameter, address_stateParameter);
        }
    }
}
