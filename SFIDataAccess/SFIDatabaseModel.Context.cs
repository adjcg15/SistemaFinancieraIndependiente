//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SFIDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SFIDatabaseContext : DbContext
    {
        public SFIDatabaseContext()
            : base("name=SFIDatabaseContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<address> addresses { get; set; }
        public virtual DbSet<bank_accounts> bank_accounts { get; set; }
        public virtual DbSet<client> clients { get; set; }
        public virtual DbSet<contact_method_types> contact_method_types { get; set; }
        public virtual DbSet<contact_methods> contact_methods { get; set; }
        public virtual DbSet<credit_applications> credit_applications { get; set; }
        public virtual DbSet<credit_applications_state> credit_applications_state { get; set; }
        public virtual DbSet<credit_conditions> credit_conditions { get; set; }
        public virtual DbSet<credit_granting_polices> credit_granting_polices { get; set; }
        public virtual DbSet<credit_types> credit_types { get; set; }
        public virtual DbSet<credit> credits { get; set; }
        public virtual DbSet<dictum> dictums { get; set; }
        public virtual DbSet<digital_documents> digital_documents { get; set; }
        public virtual DbSet<employee_roles> employee_roles { get; set; }
        public virtual DbSet<personal_references> personal_references { get; set; }
        public virtual DbSet<polices_apply_dictums> polices_apply_dictums { get; set; }
        public virtual DbSet<regime> regimes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<system_accounts> system_accounts { get; set; }
        public virtual DbSet<work_centers> work_centers { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int RegisterCreditApplication(string invoice, Nullable<System.DateTime> expedition_date, Nullable<decimal> minimun_amount_accepted, string purpose, Nullable<decimal> requested_amount, string client_rfc, string employee_number, string credit_condition_identifier, Nullable<int> id_credit_type)
        {
            var invoiceParameter = invoice != null ?
                new ObjectParameter("invoice", invoice) :
                new ObjectParameter("invoice", typeof(string));
    
            var expedition_dateParameter = expedition_date.HasValue ?
                new ObjectParameter("expedition_date", expedition_date) :
                new ObjectParameter("expedition_date", typeof(System.DateTime));
    
            var minimun_amount_acceptedParameter = minimun_amount_accepted.HasValue ?
                new ObjectParameter("minimun_amount_accepted", minimun_amount_accepted) :
                new ObjectParameter("minimun_amount_accepted", typeof(decimal));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("purpose", purpose) :
                new ObjectParameter("purpose", typeof(string));
    
            var requested_amountParameter = requested_amount.HasValue ?
                new ObjectParameter("requested_amount", requested_amount) :
                new ObjectParameter("requested_amount", typeof(decimal));
    
            var client_rfcParameter = client_rfc != null ?
                new ObjectParameter("client_rfc", client_rfc) :
                new ObjectParameter("client_rfc", typeof(string));
    
            var employee_numberParameter = employee_number != null ?
                new ObjectParameter("employee_number", employee_number) :
                new ObjectParameter("employee_number", typeof(string));
    
            var credit_condition_identifierParameter = credit_condition_identifier != null ?
                new ObjectParameter("credit_condition_identifier", credit_condition_identifier) :
                new ObjectParameter("credit_condition_identifier", typeof(string));
    
            var id_credit_typeParameter = id_credit_type.HasValue ?
                new ObjectParameter("id_credit_type", id_credit_type) :
                new ObjectParameter("id_credit_type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterCreditApplication", invoiceParameter, expedition_dateParameter, minimun_amount_acceptedParameter, purposeParameter, requested_amountParameter, client_rfcParameter, employee_numberParameter, credit_condition_identifierParameter, id_credit_typeParameter);
        }
    }
}
